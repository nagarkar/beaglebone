//$file${.::active_objects.cpp} ##############################################
//
// Model: imu.qm
// File:  ${.::active_objects.cpp}
//
// This code has been generated by QM tool (https://state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//$endhead${.::active_objects.cpp} ###########################################
#include "qpcpp.h" // QP/C++ framework API
#include "bsp.h"   // Board Support Package interface
#include "active_objects.h"

/**
 * This file contains teh following format:
 * <declaration of AO type>
 * <declaration of local variable of the type>
 *
 * This way, the order of declarations matters, and earlier variables can be used later.
 *
 * At teh end of the file, all the variables are declared as opaque pointers to QActive objects,
 * and used elsewhere, for instance, to start the AO in the main program.
**/
using namespace QP;

//$declare${AOs::Blinky} #####################################################
//${AOs::Blinky} .............................................................
class Blinky : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;

public:
    Blinky();

protected:
    static QP::QState initial(Blinky * const me, QP::QEvt const * const e);
    static QP::QState off(Blinky * const me, QP::QEvt const * const e);
    static QP::QState on(Blinky * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::Blinky} #####################################################
Blinky l_blinky;

//$declare${AOs::AHRS} #######################################################
//${AOs::AHRS} ...............................................................
class AHRS : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;

public:
    AHRS();

protected:
    static QP::QState initial(AHRS * const me, QP::QEvt const * const e);
    static QP::QState RUNNING(AHRS * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::AHRS} #######################################################
AHRS l_ahrs;


// ask QM to define the Blinky class (including the state machine) -----------
//$define${AOs::Blinky} ######################################################
// Check for the minimum required QP version
#if ((QP_VERSION < 601) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 6.0.1 or higher required
#endif
//${AOs::Blinky} .............................................................
//${AOs::Blinky::Blinky} .....................................................
Blinky::Blinky()
  : QActive(Q_STATE_CAST(&Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG)
{}

//${AOs::Blinky::SM} .........................................................
QP::QState Blinky::initial(Blinky * const me, QP::QEvt const * const e) {
    //${AOs::Blinky::SM::initial}
    // arm the private time event to expire in 1/2s
    // and periodically every 1/2 second
    me->m_timeEvt.armX(BLINKY_TICKS, BLINKY_TICKS);
    return Q_TRAN(&off);
}
//${AOs::Blinky::SM::off} ....................................................
QP::QState Blinky::off(Blinky * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky::SM::off}
        case Q_ENTRY_SIG: {
            BSP_ledOff();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky::SM::off::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&on);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::Blinky::SM::on} .....................................................
QP::QState Blinky::on(Blinky * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky::SM::on}
        case Q_ENTRY_SIG: {
            BSP_ledOn();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky::SM::on::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&off);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::Blinky} ######################################################
//$define${AOs::AHRS} ########################################################
//${AOs::AHRS} ...............................................................
//${AOs::AHRS::AHRS} .........................................................
AHRS::AHRS()
  : QActive(Q_STATE_CAST(&AHRS::initial)),
    m_timeEvt(this, TIMEOUT_SIG)
{}

//${AOs::AHRS::SM} ...........................................................
QP::QState AHRS::initial(AHRS * const me, QP::QEvt const * const e) {
    //${AOs::AHRS::SM::initial}
    me->m_timeEvt.armX(AHRS_TICKS, AHRS_TICKS);

    BSP_SetupIMU();
    return Q_TRAN(&RUNNING);
}
//${AOs::AHRS::SM::RUNNING} ..................................................
QP::QState AHRS::RUNNING(AHRS * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::AHRS::SM::RUNNING::TIMEOUT}
        case TIMEOUT_SIG: {
            BSP_PublishAttitude();
            status_ = Q_TRAN(&RUNNING);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::AHRS} ########################################################

// Opaque pointers
QActive * const AO_Blinky = &l_blinky;
QActive * const AO_AHRS = &l_ahrs;